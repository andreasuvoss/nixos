# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    # dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."zigbee-mqtt" = {
    image = "eclipse-mosquitto:2.0";
    volumes = [
      "/home/andreasvoss/mqtt/mosquitto-data:/mosquitto:rw"
    ];
    ports = [
      "1883:1883/tcp"
      "9001:9001/tcp"
    ];
    cmd = [ "mosquitto" "-c" "/mosquitto-no-auth.conf" ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mqtt"
      "--network=zigbee_default"
    ];
  };
  systemd.services."podman-zigbee-mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-zigbee_default.service"
    ];
    requires = [
      "podman-network-zigbee_default.service"
    ];
    partOf = [
      "podman-compose-zigbee-root.target"
    ];
    wantedBy = [
      "podman-compose-zigbee-root.target"
    ];
  };
  virtualisation.oci-containers.containers."zigbee2mqtt" = {
    image = "koenkk/zigbee2mqtt";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/home/andreasvoss/mqtt/zigbee2mqtt-data:/app/data:rw"
      "/run/udev:/run/udev:ro"
    ];
    ports = [
      "8081:8081/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/ttyUSB0:/dev/ttyUSB0:rwm"
      "--network-alias=zigbee2mqtt"
      "--network=zigbee_default"
    ];
  };
  systemd.services."podman-zigbee2mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-zigbee_default.service"
    ];
    requires = [
      "podman-network-zigbee_default.service"
    ];
    partOf = [
      "podman-compose-zigbee-root.target"
    ];
    wantedBy = [
      "podman-compose-zigbee-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-zigbee_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f zigbee_default";
    };
    script = ''
      podman network inspect zigbee_default || podman network create zigbee_default
    '';
    partOf = [ "podman-compose-zigbee-root.target" ];
    wantedBy = [ "podman-compose-zigbee-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-zigbee-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
